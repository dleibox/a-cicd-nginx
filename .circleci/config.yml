# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/node:10.16.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      - checkout

      # Run a step to setup an environment variable.
      - run: 
          name: "Setup custom environment variables"
          command: |
            echo 'export MY_ENV_VAR="A CICD NGINX"' >> $BASH_ENV # Redirect MY_ENV_VAR into $BASH_ENV
            echo 'export MY_ENV_NETWORK="a-network"' >> $BASH_ENV
            echo 'export MY_ENV_GIT="git"' >> $BASH_ENV
            echo 'export MY_ENV_GIT_CTNR="git-c"' >> $BASH_ENV
            echo 'export MY_ENV_APP="a-cicd-nginx"' >> $BASH_ENV
            echo 'export MY_ENV_APP_CTNR="a-cicd-nginx-container"' >> $BASH_ENV

      # Download and cache dependencies
      # - restore_cache:
      #     keys:
      #       - v1-dependencies-{{ checksum "package.json" }}
      #       # fallback to using the latest cache if no exact match is found
      #       - v1-dependencies-

      - run: yarn install

      # # run tests!
      # - run: yarn test

      # run deploy!
      # use ~/.ssh/id_rsa
      - add_ssh_keys

      - run:
          name: Stop All Containers & Create Docker Network
          command: |
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null git.dlei.ca -l root <<EOF
              docker network disconnect ${MY_ENV_NETWORK} ${MY_ENV_GIT_CTNR}
              docker network disconnect ${MY_ENV_NETWORK} ${MY_ENV_APP_CTNR}
              docker network rm ${MY_ENV_NETWORK}
              docker network prune -f
              docker network create ${MY_ENV_NETWORK}
            EOF
      - run:
          name: Start Git Container
          command: |
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null git.dlei.ca -l root <<EOF
              docker start ${MY_ENV_GIT_CTNR}
              docker network connect ${MY_ENV_NETWORK} ${MY_ENV_GIT_CTNR}
            EOF
      - deploy:
          name: Deploy Docker Over SSH
          command: |
            # create directories
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null git.dlei.ca -l root \
              mkdir -p /root/_daniel/${MY_ENV_APP}
            # copy files to prod server
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null git.dlei.ca -l root \
              "echo 'upstream docker-git {
                # server git.dlei.ca:8080;
                # server 172.18.0.3:8080; # docker network inspect a-network
                server git-c:8080; # container name
            }
            server {
                listen 80;
                listen [::]:80;
                server_name git.dlei.ca;
                location / {
                    proxy_pass http://docker-git;
                    # proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    # proxy_set_header X-Forwarded-Proto \$scheme;
                    # proxy_set_header X-Forwarded-Port \$server_port;
                    proxy_redirect off;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Host \$server_name;
                }
            }' > /root/_daniel/${MY_ENV_APP}/git.dlei.ca.conf"
            scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              -r ./Dockerfile root@git.dlei.ca:/root/_daniel/${MY_ENV_APP}
            # scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            #   -r ./git.dlei.ca.conf root@git.dlei.ca:/root/_daniel/${MY_ENV_APP}
            # docker process
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null git.dlei.ca -l root <<EOF
              docker stop ${MY_ENV_APP_CTNR} 
              docker rm ${MY_ENV_APP_CTNR}
              docker rmi ${MY_ENV_APP} 
              cd ~/_daniel/${MY_ENV_APP} 
              docker build -t ${MY_ENV_APP} .
              docker run -p 80:80 --network=${MY_ENV_NETWORK} --name ${MY_ENV_APP_CTNR} -d ${MY_ENV_APP} 
            EOF
            # !!!
      # - run:
      #     name: Configure and restart nginx
      #     command: |
      #       # create nginx conf and restart nginx on prod server
      #       ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null git.dlei.ca -l root \
      #         "echo 'server {
      #           listen 80;
      #           listen [::]:80;
      #           server_name git.dlei.ca;
      #           location / {
      #             proxy_pass http://localhost:8080/;
      #             proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
      #             proxy_set_header X-Forwarded-Proto \$scheme;
      #             proxy_set_header X-Forwarded-Port \$server_port;
      #           }
      #       }' > /etc/nginx/conf.d/git.dlei.ca"
      #       ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null git.dlei.ca -l root \
      #         'sudo service nginx restart'