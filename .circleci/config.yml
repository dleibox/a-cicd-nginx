# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/node:10.16.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      - checkout

      # Run a step to setup an environment variable.
      - run: 
          name: "Setup custom environment variables"
          command: |
            echo 'export MY_ENV_VAR="A CICD NGINX"' >> $BASH_ENV # Redirect MY_ENV_VAR into $BASH_ENV
            echo 'export REMOTE_SERVER="149.248.52.58"' >> $BASH_ENV
            echo 'export MY_ENV_NETWORK="a-network"' >> $BASH_ENV
            echo 'export MY_ENV_GIT="git"' >> $BASH_ENV
            echo 'export MY_ENV_GIT_CTNR="git-c"' >> $BASH_ENV
            echo 'export MY_WEB_APP="a-cicd-nginx"' >> $BASH_ENV
            echo 'export MY_WEB_APP_CTNR="a-cicd-nginx-c"' >> $BASH_ENV

      # Download and cache dependencies
      # - restore_cache:
      #     keys:
      #       - v1-dependencies-{{ checksum "package.json" }}
      #       # fallback to using the latest cache if no exact match is found
      #       - v1-dependencies-

      - run: yarn install

      # # run tests!
      # - run: yarn test

      # run deploy!
      # use ~/.ssh/id_rsa
      - add_ssh_keys

      - run:
          name: Stop All Containers & Create Docker Network
          command: |
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${REMOTE_SERVER} -l root <<EOF
              # docker network disconnect ${MY_ENV_NETWORK} ${MY_ENV_GIT_CTNR}
              # docker network disconnect ${MY_ENV_NETWORK} ${MY_WEB_APP_CTNR}
              # docker network disconnect ${MY_ENV_NETWORK} a-springboot-service-c
              docker rm -f ${MY_WEB_APP_CTNR}
              docker rmi ${MY_WEB_APP}
              docker rm -f ${MY_ENV_GIT_CTNR}
              docker rmi ${MY_ENV_GIT}
              docker rm -f a-springboot-service-c
              docker rmi a-springboot-service
              docker network rm ${MY_ENV_NETWORK}
              docker network prune -f
              docker network create ${MY_ENV_NETWORK}
            EOF
      - run:
          name: Start Containers
          command: |
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${REMOTE_SERVER} -l root <<EOF
              docker run -d --name ${MY_ENV_GIT_CTNR} --network=${MY_ENV_NETWORK} -v ~/_daniel/gitbucket:/gitbucket gitbucket/gitbucket
              docker start ${MY_ENV_GIT_CTNR}
              # docker network connect ${MY_ENV_NETWORK} ${MY_ENV_GIT_CTNR}
              # docker start a-springboot-service-container
              # docker network connect ${MY_ENV_NETWORK} a-springboot-service-container
            EOF
      - deploy:
          name: Deploy NGINX Docker Over SSH
          command: |
            # create directories
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${REMOTE_SERVER} -l root \
              mkdir -p /root/_daniel/${MY_WEB_APP}
            # copy files to prod server
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${REMOTE_SERVER} -l root \
              "echo 'server {
                listen 80;
                listen [::]:80;
                server_name git.dlei.ca;
                location / {
                    proxy_pass              http://${MY_ENV_GIT_CTNR}:8080;
                    proxy_redirect          off;
                    proxy_set_header        Host \$host;
                    proxy_set_header        X-Real-IP \$remote_addr;
                    proxy_set_header        X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header        X-Forwarded-Host \$server_name;
                    proxy_connect_timeout   150;
                    proxy_send_timeout      100;
                    proxy_read_timeout      100;
                    proxy_buffers           4 32k;
                    client_max_body_size    500m; # Big number is we can post big commits.
                    client_body_buffer_size 128k;
                }
            }' > /root/_daniel/${MY_WEB_APP}/git.dlei.ca.conf"
            # ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${REMOTE_SERVER} -l root \
            #   "echo 'server {
            #     listen 80;
            #     listen [::]:80;
            #     server_name api2.dlei.ca;
            #     location / {
            #         proxy_pass        http://a-springboot-service-container:8080;
            #         proxy_redirect    off;
            #         proxy_set_header  Host \$host;
            #         proxy_set_header  X-Real-IP \$remote_addr;
            #         proxy_set_header  X-Forwarded-For \$proxy_add_x_forwarded_for;
            #         proxy_set_header  X-Forwarded-Host \$server_name;
            #     }
            # }' > /root/_daniel/${MY_WEB_APP}/api2.dlei.ca.conf"
            scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              -r ./Dockerfile root@${REMOTE_SERVER}:/root/_daniel/${MY_WEB_APP}
            # docker process
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${REMOTE_SERVER} -l root <<EOF
              cd ~/_daniel/${MY_WEB_APP} 
              docker build -t ${MY_WEB_APP} .
              docker run -p 80:80 -p 443:443 --network=${MY_ENV_NETWORK} --name ${MY_WEB_APP_CTNR} -d ${MY_WEB_APP} 
            EOF
            # !!!